name: Build and Release Desktop Apps

on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: false

# Required permissions for creating releases
permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Get version
        id: get_version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ "${{ github.event.inputs.version }}" != "" ]]; then
            VERSION=${{ github.event.inputs.version }}
          else
            VERSION="v$(node -p "require('./package.json').version")-$(git rev-parse --short HEAD)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: WildCAT ${{ steps.get_version.outputs.version }}
          body: |
            ## WildCAT Desktop App Release

            ### Downloads
            - **Windows**: Download the `.exe` installer below
            - **macOS**: Download the `.dmg` installer below

            ### Changes
            See commit history for details.

            ### Installation
            1. Download the appropriate installer for your platform
            2. Run the installer
            3. Launch WildCAT from your applications

            ### Features
            - CSV column reordering with drag-and-drop
            - Save and load column arrangements
            - Export reordered CSV files
            - Native file dialogs
            - Offline support
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-mac:
    name: Build macOS
    needs: create-release
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Vite app
        run: npm run build

      - name: Build Electron app (macOS)
        run: npm run dist:mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List release files
        run: ls -lh release/

      - name: Find DMG files
        id: find_dmg
        run: |
          echo "Looking for DMG files..."
          find release -name "*.dmg" -type f
          DMG_FILES=$(find release -name "*.dmg" -type f | tr '\n' ' ')
          echo "dmg_files=$DMG_FILES" >> $GITHUB_OUTPUT
          echo "Found DMG files: $DMG_FILES"

      - name: Upload Release Assets (macOS)
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: release/*.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows:
    name: Build Windows
    needs: create-release
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Vite app
        run: npm run build

      - name: Build Electron app (Windows)
        run: npm run dist:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List release files
        run: Get-ChildItem -Path release -Recurse
        shell: powershell

      - name: Find EXE files
        id: find_exe
        shell: powershell
        run: |
          Write-Host "Looking for EXE files..."
          Get-ChildItem -Path release -Filter *.exe -Recurse | ForEach-Object { Write-Host $_.FullName }

      - name: Upload Release Assets (Windows)
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: release/*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
